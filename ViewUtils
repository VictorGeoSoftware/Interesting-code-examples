// https://antonioleiva.com/functional-operations-viewgroup-kotlin/
public val ViewGroup.viewsRecursive: List<View>
    get() = views.flatMap { view ->
        when (view) {
            is ViewGroup -> view.viewsRecursive
            else -> listOf(view)
        }
    }

public val ViewGroup.views: List<View>
    get() = asSequence().toList()

fun ViewGroup.asSequence(): Sequence<View> = object : Sequence<View> {
    override fun iterator(): Iterator<View> = object : Iterator<View> {
        var nextValue: View? = null
        var done = false
        var position: Int = 0

        override fun hasNext(): Boolean {
            if (nextValue == null && !done) {
                nextValue = getChildAt(position)
                position++

                if (nextValue == null) {
                    done = true
                }
            }

            return nextValue != null
        }

        override fun next(): View {
            if (!hasNext()) {
                throw NoSuchElementException()
            }

            val answer = nextValue
            nextValue = null
            return answer!!
        }
    }
}
